<?xml version="1.0"?>
<configuration>
	<placeholders>
		<placeholder id="template_name">Database to Salesforce User Migration</placeholder>
	</placeholders>
	<sections>
		<section id="use_case">
As a Salesforce administrator I want to synchronize Users from a database to Salesfoce.

This template helps you migrate users from a database to a Salesforce instance, specify filtering criteria, and set the behavior if an user already exists in the destination organization. 

This template leverages the batch module.
The batch job is divided into Process Records and On Complete stages.
Firstly the template browses to the database and queries all existing Users that match the filter criteria.
During the Process stage, each database user is filtered depending on if it has an existing matching user in the Salesforce organization.
The last step of the Process stage groups the users and upserts them into Salesforce.
Finally during the On Complete stage, the template outputs statistics data to the console and sends notification email with the results of the batch execution. 
		</section>
		<section id="considerations">
<![CDATA[

This template is customized for MySQL. To use it with a different SQL implementation, some changes are necessary.

After you import your template into Anypoint Studio, follow these steps to run it:

+ Locate the properties file `mule.dev.properties`, in src/main/resources.
+ Complete all the properties required as per the examples in "Properties to Configure".
+ Add a dependency for your database dth eGlobal Elements section of the config flow to use your database-specific driver.
+ By default this template relies on existing table user in the database of your choice, so it performs SQL statements against this table, but feel free to customize prepared statements to use a different database table or columns.
+ Script for creating database table (MySQL syntax)

<pre>
CREATE TABLE `sf_user` (
  `firstname` varchar(255) DEFAULT NULL,
  `lastname` varchar(255) DEFAULT NULL,
  `salesforce_id` varchar(255) DEFAULT NULL,
  `email` varchar(255) DEFAULT NULL,
  `id` int(11) NOT NULL AUTO_INCREMENT,
  PRIMARY KEY (`id`)
)
</pre>

+ Optionally customize query templates in `businessLogic.xml` if they don't match the SQL grammar of the database of your choice.
+ Once that is done, right click your template project folder.
+ Click Run As > Mule Application.
]]>
		</section>
		<section id="run_it">
<![CDATA[

Example of the output you see after browsing to the HTTP endpoint:

	{
	  "Message": "Batch Process initiated",
	  "ID": "7fc674b0-e4b7-11e7-9627-100ba905a441",
	  "RecordCount": 32,
	  "StartExecutionOn": "2018-12-19T13:24:03Z"
	}
]]>
		</section>
		<section id="running_on_cloudhub">
<![CDATA[
Once your app running, if you choose the `sfdcusermigration` domain name, to trigger the use case browse to `http://sfdcusermigration.cloudhub.io/migrateusers`, the program invokes, and a report is sent to the emails you configured.
]]>
		</section>
		<section id="running_on_standalone">
<![CDATA[
After this, to trigger the use case, browse to the local HTTP endpoint with the port you configured in your file. For example for port `9090`, browse to `http://localhost:9090/migrateUsers`, which creates a CSV report and sends it to the emails you set.
]]>
		</section>
		<section id="application_configuration">
		<![CDATA[
+ http.port `9090` 

#### Salesforce Connector Configuration for Company A
+ sfdc.a.username `bob.dylan@example.com`
+ sfdc.a.password `DylanPassword123`
+ sfdc.a.securityToken `avsfwCUl7apQs56Xq2AKi3X`

+ user.localeSidKey `en_US`
+ user.languageLocaleKey `en_US`
+ user.timeZoneSidKey `America/New_York`
+ user.emailEncodingKey `ISO-8859-1`

#### Database Connection URL
+ db.host `localhost`
+ db.port `3306`
+ db.user `user-name`
+ db.password `user-password`
+ db.databasename `dbname`

#### SMTP Services Configuration
+ smtp.host `smtp.example.com`
+ smtp.port `587`
+ smtp.user `exampleuser`
+ smtp.password `examplepassword`

#### Email Details
+ mail.from `batch.migrateUsers.migration%example.com`
+ mail.to `polly.hedra@example.com`
+ mail.subject `Batch Job Finished Report`
]]>
		</section>
		<section id="api_calls">
		<![CDATA[
Salesforce imposes limits on the number of API calls that can be made. Therefore calculating this amount is important. The template calls to the API can be calculated using this formula:

***X + 1 / 200***

***X*** is the number of users to synchronize on each run. 

Divide by ***200*** because by default, users are gathered in groups of 200 for each upsert API call in the commit step. 

For instance if 10 records are fetched from an origin instance, then 11 API calls are made (10 + 1).
]]>
		</section>
		<section id="default_endpoints_xml">
		<![CDATA[
This is the file where you find the inbound and outbound sides of your integration app.
This template has only an HTTP Listener connector as the way to trigger the use case.

$H$H# Inbound Flow
**HTTP Listener Connector** - Start Report Generation

+ `${http.port}` is set as a property to be defined either on a property file or in CloudHub environment variables.
+ The path configured by default is `migrateUsers` and you are free to change for the one you prefer.
+ The host name for all endpoints in your CloudHub configuration is `localhost`. CloudHub routes requests from your application domain URL to the endpoint.
+ The endpoint is a *request-response* and a result of calling it, fetches the response with the total records by the criteria specified.
]]>
		</section>
		<section id="default_business_logic_xml">
		<![CDATA[
The functional aspect of this template is implemented in this XML, directed by a flow responsible for excecuting the logic.
For the purpose of this template, the *mainFlow* excecutes a batch job which handles all its logic.
This flow has an exception strategy that basically consists of invoking the *defaultChoiseExceptionStrategy* defined in *errorHandling.xml* file.
]]>
		</section>
	</sections>
</configuration>
